name: Security Testing

on:
  workflow_call:
  workflow_dispatch:

jobs:
  sql-injection-test:
    name: SQL Injection Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start application
        run: |
          docker-compose up -d
          sleep 30

      - name: SQL Injection Tests
        run: |
          echo "Testing SQL Injection vulnerabilities..."
          
          curl -v -X POST http://localhost:8080/user \
            -H "Content-Type: application/json" \
            -d '{"username":"admin'\'' OR '\''1'\''='\''1","password":"test"}' || true
          
          curl -v -X GET "http://localhost:8080/user?id=1' OR '1'='1" || true

      - name: Save test results
        run: |
          echo "SQL Injection tests completed" > sql-injection-results.txt

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: sql-injection-test-results
          path: sql-injection-results.txt

  xss-test:
    name: XSS Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start application
        run: |
          docker-compose up -d
          sleep 30

      - name: XSS Tests
        run: |
          echo "Testing XSS vulnerabilities..."
          
          curl -v -X POST http://localhost:8080/comment \
            -H "Content-Type: application/json" \
            -d '{"comment":"<script>alert('\''XSS'\'')</script>"}' || true
          
          curl -v -X POST http://localhost:8080/search \
            -d "query=<img src=x onerror=alert('XSS')>" || true

      - name: Save test results
        run: |
          echo "XSS tests completed" > xss-results.txt

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: xss-test-results
          path: xss-results.txt

  ssrf-test:
    name: SSRF Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start application
        run: |
          docker-compose up -d
          sleep 30

      - name: SSRF Tests
        run: |
          echo "Testing SSRF vulnerabilities..."
          
          curl -v -X POST http://localhost:8080/fetch \
            -H "Content-Type: application/json" \
            -d '{"url":"http://internal_site/"}' || true
          
          curl -v -X POST http://localhost:8080/fetch \
            -d "url=http://169.254.169.254/latest/meta-data/" || true

      - name: Save test results
        run: |
          echo "SSRF tests completed" > ssrf-results.txt

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: ssrf-test-results
          path: ssrf-results.txt

  nikto-scan:
    name: Nikto Web Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start application
        run: |
          docker-compose up -d
          sleep 30

      - name: Run Nikto
        run: |
          docker run --network host frapsoft/nikto \
            -h http://localhost:8080 \
            -Format json \
            -output nikto-results.json || true

      - name: Upload Nikto results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: nikto-scan-results
          path: nikto-results.json

  cleanup:
    name: Cleanup Test Environment
    runs-on: ubuntu-latest
    needs: [sql-injection-test, xss-test, ssrf-test, nikto-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Stop services
        run: |
          docker-compose down -v || true