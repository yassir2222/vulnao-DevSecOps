name: Container Security Scan

on:
  workflow_call:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: docker compose build

      - name: List Docker images
        run: docker images

      - name: Save Docker images
        run: |
          # Use the actual image names from docker compose
          docker save $(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(vulnado|client|internal)" | head -3) -o images.tar

      - name: Upload Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: images.tar
          retention-days: 1

  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker images
        run: docker load -i images.tar

      - name: List loaded images
        run: docker images

      - name: Get vulnado image name
        id: get-image
        run: |
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep vulnado | grep -v client | grep -v internal | head -1)
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "Scanning image: $IMAGE_NAME"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-image.outputs.image_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate Trivy HTML report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-image.outputs.image_name }}
          format: 'template'
          template: '@/contrib/html.tpl'
          output: 'trivy-report.html'

      - name: Upload Trivy HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.html

  snyk-container-scan:
    name: Snyk Container Scan
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker images
        run: docker load -i images.tar

      - name: Get vulnado image name
        id: get-image
        run: |
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep vulnado | grep -v client | grep -v internal | head -1)
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Run Snyk Container Scan
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.get-image.outputs.image_name }}
          args: --severity-threshold=high

      - name: Upload Snyk Container results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-container-report
          path: snyk.sarif
          if-no-files-found: warn

  anchore-scan:
    name: Anchore Container Scan
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker images
        run: docker load -i images.tar

      - name: Get vulnado image name
        id: get-image
        run: |
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep vulnado | grep -v client | grep -v internal | head -1)
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Run Anchore scan
        uses: anchore/scan-action@v4
        with:
          image: ${{ steps.get-image.outputs.image_name }}
          fail-build: false
          severity-cutoff: high

      - name: Upload Anchore scan results
        uses: actions/upload-artifact@v4
        with:
          name: anchore-report
          path: anchore-reports/
          if-no-files-found: warn

  grype-scan:
    name: Grype Vulnerability Scanner
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker images
        run: docker load -i images.tar

      - name: Get vulnado image name
        id: get-image
        run: |
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep vulnado | grep -v client | grep -v internal | head -1)
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Run Grype
        uses: anchore/scan-action@v4
        with:
          image: ${{ steps.get-image.outputs.image_name }}
          output-format: sarif
          fail-build: false

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif